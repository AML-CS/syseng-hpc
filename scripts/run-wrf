#!/usr/bin/env bash
#
# Author vdguevara@uninorte.edu.co
# Updated by sjdonado@uninorte.edu.co
# More info: https://aml-cs.github.io
#

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/print_msg"

options=$(getopt -o "WRw:r:o:f:t:s:i:d:" --long help --long only-wrf --long only-real --long wrf-processors:\
                                    --long real-processors: --long output: --long from: --long to:\
                                    --long interval: --long domains: -- "$@")

function usage() {
    echo "Usage: $0 [options]"
    echo "Runs a WRF simulation using wrf.exe and real.exe"
    printf "\n  %-35s %s\n" "-W --only-wrf" "Run only wrf.exe"
    printf "  %-35s %s\n" "-R --only-real" "Run only real.exe"
    printf "  %-35s %s\n" "-w --wrf-processors=PROCESSORS" "How many processors to run wrf.exe with. The default value is 32"
    printf "  %-35s %s\n" "-r --real-processors=PROCESSOSRS" "How many processors to run real.exe with. The default value is 15"
    printf "  %-35s %s\n" "-f --from=DATE" "Start date"
    printf "  %-35s %s\n" "-t --to=DATE" "End date"
    printf "  %-35s %s\n" "-i --interval=HOURS" "Simulation real data interval seconds in hours"
    printf "  %-35s %s\n" "-d --domains=NUMBER" "Number of domains"
    printf "  %-35s %s\n" "-o --output=DIR" "Copy the output to DESTINATION"
    printf "  %-35s %s\n\n" "--help" "Show this message and exit"
    exit 0
}

eval set -- "$options"

DIR=$(pwd)
REAL=true
WRF=true
WRF_PROCESSORS=32
REAL_PROCESSORS=6
DESTINATION=$(pwd)
DOMAINS=3

while true; do
    case "$1" in
        -W|--only-wrf)
            REAL=false
            ;;
        -R|--only-real)
            WRF=false
            ;;
        -w|--wrf-processors)
            shift
            WRF_PROCESSORS="$1"
            ;;
        -r|--real-processors)
            shift
            REAL_PROCESSORS="$1"
            ;;
        -o|--output)
            shift
            DESTINATION=$(realpath $1)
            ;;
        --help)
            usage
            ;;
        -t|--to)
            shift
            TO=$1
            ;;
        -i|--interval)
            shift
            INTERVAL=$(($1*3600))
            ;;
        -d|--domains)
            shift
            DOMAINS=$1
            ;;
        -f|--from)
            shift
            FROM=$1
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

cd ${WRF_DIR}/run

NAMELIST_FILE=$NAMELISTS_DIR/namelist-wrf.input
ln -sf $NAMELIST_FILE namelist.input

print_msg "Number of domains: ${DOMAINS}" -cmagenta

if [[ -n $INTERVAL ]]; then
    sed -i "s/interval_seconds.*/interval_seconds = ${INTERVAL},/" $NAMELIST_FILE
    print_msg "Real data inverval seconds: ${INTERVAL}" -cmagenta
fi

if [[ -n $FROM ]]; then
    YEAR=$(date --date="${FROM}" +%Y)
    MONTH=$(date --date="${FROM}" +%m)
    DAY=$(date --date="${FROM}" +%d)
    HOUR=$(date --date="${FROM}" +%H)
    case $DOMAINS in
        1)
            sed -i "s/start_year.*/start_year = $YEAR,/" $NAMELIST_FILE
            sed -i "s/start_month.*/start_month = $MONTH,/" $NAMELIST_FILE
            sed -i "s/start_day.*/start_day = $DAY,/" $NAMELIST_FILE
            sed -i "s/start_hour.*/start_hour = $HOUR,/" $NAMELIST_FILE
            ;;
        2)
            sed -i "s/start_year.*/start_year = $YEAR,$YEAR,/" $NAMELIST_FILE
            sed -i "s/start_month.*/start_month = $MONTH,$MONTH,/" $NAMELIST_FILE
            sed -i "s/start_day.*/start_day = $DAY,$DAY,/" $NAMELIST_FILE
            sed -i "s/start_hour.*/start_hour = $HOUR,$HOUR,/" $NAMELIST_FILE
            ;;
        *)
            sed -i "s/start_year.*/start_year = $YEAR,$YEAR,$YEAR,/" $NAMELIST_FILE
            sed -i "s/start_month.*/start_month = $MONTH,$MONTH,$MONTH,/" $NAMELIST_FILE
            sed -i "s/start_day.*/start_day = $DAY,$DAY,$DAY,/" $NAMELIST_FILE
            sed -i "s/start_hour.*/start_hour = $HOUR,$HOUR,$HOUR,/" $NAMELIST_FILE
            ;;
    esac
    print_msg "Start date: ${FROM}" -cmagenta
fi

if [[ -n $TO ]]; then
    YEAR=$(date --date="${TO}" +%Y)
    MONTH=$(date --date="${TO}" +%m)
    DAY=$(date --date="${TO}" +%d)
    HOUR=$(date --date="${TO}" +%H)
    case $DOMAINS in
        1)
            sed -i "s/end_year.*/end_year = $YEAR,/" $NAMELIST_FILE
            sed -i "s/end_month.*/end_month = $MONTH,/" $NAMELIST_FILE
            sed -i "s/end_day.*/end_day = $DAY,/" $NAMELIST_FILE
            sed -i "s/end_hour.*/end_hour = $HOUR,/" $NAMELIST_FILE
            ;;
        2)
            sed -i "s/end_year.*/end_year = $YEAR,$YEAR,/" $NAMELIST_FILE
            sed -i "s/end_month.*/end_month = $MONTH,$MONTH,/" $NAMELIST_FILE
            sed -i "s/end_day.*/end_day = $DAY,$DAY,/" $NAMELIST_FILE
            sed -i "s/end_hour.*/end_hour = $HOUR,$HOUR,/" $NAMELIST_FILE
            ;;
        *)
            sed -i "s/end_year.*/end_year = $YEAR,$YEAR,$YEAR,/" $NAMELIST_FILE
            sed -i "s/end_month.*/end_month = $MONTH,$MONTH,$MONTH,/" $NAMELIST_FILE
            sed -i "s/end_day.*/end_day = $DAY,$DAY,$DAY,/" $NAMELIST_FILE
            sed -i "s/end_hour.*/end_hour = $HOUR,$HOUR,$HOUR,/" $NAMELIST_FILE
            ;;
    esac
    print_msg "End date: ${TO}" -cmagenta
fi

rm -f rsl.*
rm -f met_em*
rm -f stdout.log
ln -sf ${WPS_DIR}/met_em* .

$BIN_DIR/link-wrf-real-data.py

if ${REAL}
then
    rm -f wrfinput_d* 2> /dev/null
    rm -f wrfbdy_d* 2> /dev/null
    print_msg "Running real.exe with ${REAL_PROCESSORS} processors"
    # time mpirun -np ${REAL_PROCESSORS} ./real.exe > stdout.log 2>&1
    # time mpirun -n 32 ./real.exe > stdout.log 2>&1
    time srun -n 1 --mpi=pmi2 ./real.exe
    if [ ! -f wrfbdy_d* ]; then
        print_msg "An error ocurred while running WRF real.exe" -cred
        cat rsl.error.0000
        exit 1
    fi
fi

if ${WRF}
then
    rm -rf ${WRF_DIR}/run/wrfout* 2> /dev/null
    print_msg "\nRunning wrf.exe with ${WRF_PROCESSORS} processors"
    # time mpirun -np ${WRF_PROCESSORS} ./wrf.exe > stdout.log 2>&1
    # time mpirun -n 32 ./wrf.exe > stdout.log 2>&1
    time srun -n 16 --mpi=pmi2 ./wrf.exe
    if [ ! -f wrfout* ]; then
        print_msg "An error ocurred while running WRF" -cred
        cat rsl.error.0000
        exit 1
    fi
    chmod 777 wrfout* 2> /dev/null
    cp ${WRF_DIR}/run/wrfout* ${DESTINATION}
    grep "SUCCESS COMPLETE WRF" "rsl.error.0000" > /dev/null
    if [[ $? -eq 0 ]]; then
        print_msg "Successful WRF run" -cgreen
    else
        print_msg "An error ocurred while running WRF" -cred
        cat rsl.error.0000
        exit 1
    fi
fi
